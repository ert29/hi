plr = game.Players.LocalPlayer.Character
plr["New Tonk"].Name = "tonk1"
plr["New Tonk"].Name = "tonk2"
plr["MeshPartAccessory"].Name = "hed"
plr["MeshPartAccessory"].Name = "car2"
plr["MeshPartAccessory"].Name = "car1"
plr["MeshPartAccessory"].Name = "Treadmill"

    for _,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA("Accessory") then
            if v.Handle:FindFirstChild("Mesh") then
                v.Handle.Mesh:Destroy()
            else
                v.Handle.SpecialMesh:Destroy()
            end
        end
    end

setfpscap(60)

getgenv()._SETTINGS = {
    NoAnimations = false
}

local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local RemovedInstances = {}

local env = {
	Movement = function(LocalCharacter, ScriptCharacter)
		RunService.Stepped:Connect(function()
			if LocalCharacter.Humanoid.Jump == true then
				ScriptCharacter.Humanoid.Jump = true
			end
		
			ScriptCharacter.Humanoid:Move(LocalCharacter.Humanoid.MoveDirection)
		end)
	end,

    SimulationNet = function(Player, Value)
        RunService.RenderStepped:Connect(function()
            sethiddenproperty(Player, "SimulationRadius", Value)
        end)
    end,

    ClearAnimations = function(Character, Bool)
        if Bool == true then
            for _,Animation in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do
                Animation:Stop()
            end
        end
    end,

    CleanUp = function(Character)
        for _,Instance_ in pairs(Character:GetDescendants()) do
            if Instance_:IsA("Decal") or Instance_:IsA("Part") or Instance_:IsA("MeshPart") then
                Instance_.Transparency = 1
            end
        end
    end,

    NoclipCharacter = function(Character) 
        for _,Instance_ in pairs(Character:GetDescendants()) do
            if Instance_:IsA("Part") or Instance_:IsA("MeshPart") then
                RunService.Stepped:Connect(function()
                    Instance_.CanCollide = false
                end)
            end
        end
    end,

    Align = function(Part0, Part1)
		local function vel(Instance_, Character)		
			local Signal = game.RunService.Heartbeat:connect(function()
				Instance_.Velocity = Vector3.new(-62.89786648237, 0, -62.89786648237)
			end)
		end

		local Attachment0 = Instance.new("Attachment", Part0)
		local Attachment1 = Instance.new("Attachment", Part1)

		local AlignPosition = Instance.new("AlignPosition", Part0)
		local AlignOrientation = Instance.new("AlignOrientation", Part0)
		
		AlignPosition.MaxForce = 9e9
		AlignPosition.Responsiveness = 200
		AlignOrientation.MaxTorque = 9e9
		AlignOrientation.Responsiveness = 200

		AlignPosition.Attachment0 = Attachment0
		AlignPosition.Attachment1 = Attachment1
		AlignOrientation.Attachment0 = Attachment0
		AlignOrientation.Attachment1 = Attachment1

		if Part0.Name == "Handle" then
			Part0:BreakJoints()

			Attachment0.Position = Vector3.new(0, 0, 0)
			Attachment0.Orientation = Vector3.new(90, 0, 0)

			if Part0.Parent.Name == "Pal Hair" then
				Part0.Mesh:Destroy()
			end
		else
			Attachment0.Position = Vector3.new(0, 0, 0)
			Attachment0.Orientation = Vector3.new(0, 0, 0)
		end

		vel(Part0, game.Players.LocalPlayer.Character)
	end,

    UnAnchorCharacter = function(Character)
        for _,Instance_ in pairs(Character:GetDescendants()) do
            if Instance_:IsA("Part") or Instance_:IsA("MeshPart") then
                Instance_.Anchored = false
            end
        end
    end,

	ClearWelds = function(Character)
		local Welds = {
			RightArm = Character.Torso["Right Shoulder"],
			RightLeg = Character.Torso["Right Hip"],
			LeftArm = Character.Torso["Left Shoulder"],
			LeftLeg = Character.Torso["Left Hip"],
			Torso = Character.HumanoidRootPart.RootJoint
		}

		for _,Weld in pairs(Welds) do
			Weld:Remove()
		end
	end,

	Cframe = function(Part0, Part1, Methods)
		local Cframe = game.RunService["Heartbeat"]:Connect(function()
			Part0.CFrame = Part1.CFrame
		end)

		if not Part0 then
			Cframe:disconnect()
			Cframe = nil
		end
	end,

	Remove = function(Part)
		table.insert(RemovedInstances, Part.Name)

		Part:Destroy()
	end,

	setCamera = function(Part)
		Workspace.Camera.CameraSubject = Part
	end,

	bodyCollision = function(Humanoid)
		Humanoid:ChangeState(16)
	end
}

local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character
local Animate = LocalCharacter.Animate
local Humanoid = LocalCharacter.Humanoid
local HumanoidRootPart = LocalCharacter.HumanoidRootPart

LocalCharacter.Archivable = true

local ScriptCharacter = LocalCharacter:Clone()
ScriptCharacter.Name = "ScriptCharacter"
ScriptCharacter.Parent = LocalCharacter

env.CleanUp(ScriptCharacter)
env.NoclipCharacter(ScriptCharacter)
env.NoclipCharacter(LocalCharacter)
env.UnAnchorCharacter(ScriptCharacter)
env.UnAnchorCharacter(LocalCharacter)
env.SimulationNet(LocalPlayer, 1000)
env.ClearWelds(LocalCharacter)
env.Remove(LocalCharacter["HumanoidRootPart"])
env.Movement(LocalCharacter, ScriptCharacter)
env.setCamera(ScriptCharacter.Humanoid)
env.bodyCollision(LocalCharacter.Humanoid)

if _SETTINGS.NoAnimations == true then
    env.ClearAnimations(ScriptCharacter, true)
end

env.Align(LocalCharacter["Torso"], ScriptCharacter["Torso"])
env.Align(LocalCharacter["Left Arm"], ScriptCharacter["Left Arm"])
env.Align(LocalCharacter["Left Leg"], ScriptCharacter["Left Leg"])
env.Align(LocalCharacter["Right Arm"], ScriptCharacter["Right Arm"])
env.Align(LocalCharacter["Right Leg"], ScriptCharacter["Right Leg"])

local FlingPart = nil


wait (1.5)

local unanchoredparts = {}
		local movers = {}
		local tog = true
		local move = false
		local Player = game:GetService("Players").LocalPlayer
		local Character = Player.Character
		local mov = {};
		local mov2 = {};

		local Hats = {torso1  = Character:WaitForChild("Treadmill"),
        rarm  = Character:WaitForChild("tonk1"), 
        larm  = Character:WaitForChild("tonk2"), 
        rleg  = Character:WaitForChild("car1"), 
        lleg  = Character:WaitForChild("car2"), 
        head1  = Character:WaitForChild("hed"), 
		}


		--Dont touch below

		for i,v in next, Hats do
			v.Handle.AccessoryWeld:Remove()
			for _,mesh in next, v:GetDescendants() do
				if mesh:IsA("Mesh") or mesh:IsA("Mesh") then -- change mesh to Specialmesh if u want to destroy the mesh
					mesh:Remove()
				end
			end
		end

		function ftp(str)
			local pt = {};
			if str ~= 'me' and str ~= 'random' then
				for i, v in pairs(game.Players:GetPlayers()) do
					if v.Name:lower():find(str:lower()) then
						table.insert(pt, v);
					end
				end
			elseif str == 'me' then
				table.insert(pt, plr);
			elseif str == 'random' then
				table.insert(pt, game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]);
			end
			return pt;
		end

		local function align(i,v)
			local att0 = Instance.new("Attachment", i)
			att0.Position = Vector3.new(0,0,0)
			local att1 = Instance.new("Attachment", v)
			att1.Position = Vector3.new(0,0,0)
			local AP = Instance.new("AlignPosition", i)
			AP.Attachment0 = att0
			AP.Attachment1 = att1
			AP.RigidityEnabled = false
			AP.ReactionForceEnabled = false
			AP.ApplyAtCenterOfMass = false
			AP.MaxForce = 9999999
			AP.MaxVelocity = math.huge
			AP.Responsiveness = 65
			local AO = Instance.new("AlignOrientation", i)
			AO.Attachment0 = att0
			AO.Attachment1 = att1
			AO.ReactionTorqueEnabled = false
			AO.PrimaryAxisOnly = false
			AO.MaxTorque = 9999999
			AO.MaxAngularVelocity = math.huge
			AO.Responsiveness = 50
		end


		--Dont touch above

		align(Hats.torso1.Handle, Character["Torso"])
		align(Hats.rarm.Handle, Character["Right Arm"])
    	align(Hats.larm.Handle, Character["Left Arm"])
    	align(Hats.rleg.Handle, Character["Right Leg"])
    	align(Hats.lleg.Handle, Character["Left Leg"])
    	align(Hats.head1.Handle, Character["Head"])


     Hats.torso1.Handle.Attachment.Rotation = Vector3.new(0,0,0) 
     Hats.rarm.Handle.Attachment.Rotation = Vector3.new(0,0,0) 
     Hats.larm.Handle.Attachment.Rotation = Vector3.new(0,0,0)
     Hats.rleg.Handle.Attachment.Rotation = Vector3.new(0,0,0) 
     Hats.lleg.Handle.Attachment.Rotation = Vector3.new(0,0,0)
     Hats.head1.Handle.Attachment.Rotation = Vector3.new(0,0,0)

		
        Character:WaitForChild("Torso"):FindFirstChild("Attachment").Name = "Attachment1" -- make a new attachment to
	    Character:WaitForChild("Right Arm"):FindFirstChild("Attachment").Name = "Attachment2" 
        Character:WaitForChild("Left Arm"):FindFirstChild("Attachment").Name = "Attachment3"
        Character:WaitForChild("Right Leg"):FindFirstChild("Attachment").Name = "Attachment4" 
        Character:WaitForChild("Left Leg"):FindFirstChild("Attachment").Name = "Attachment5"
        Character:WaitForChild("Head"):FindFirstChild("Attachment").Name = "Attachment6"
        Character:WaitForChild("Humanoid").HipHeight = 5

        Character:WaitForChild("Torso").Attachment1.Position = Vector3.new(0, 0, 0)
        Character:WaitForChild("Right Arm").Attachment2.Position = Vector3.new(0, 0, 0)
        Character:WaitForChild("Left Arm").Attachment3.Position = Vector3.new(0, 0, 0)
        Character:WaitForChild("Right Leg").Attachment4.Position = Vector3.new(0, 0, 0)
        Character:WaitForChild("Left Leg").Attachment5.Position = Vector3.new(0, 0, 0)
        Character:WaitForChild("Head").Attachment6.Position = Vector3.new(0, 0, 0)
        

        -- the mid value is up or down it depends it goes down if u have a minus infront of it and up if u dont
		-- the last value is forwards or backwards if u put a minus infront of it it goes forward and if u remove the minus it goes backwards
		-- the first value is to the side if u dont have minus and to the other side if u have minus im bad at explaining lol
		 Character:WaitForChild("Torso").Attachment1.Position = Vector3.new(0, 0, 0) --torso
		 Character:WaitForChild("Right Arm").Attachment2.Position = Vector3.new(3, 0, 0) --larm
		 Character:WaitForChild("Right Arm").Attachment2.Rotation = Vector3.new(90, 180, 90) --larm rotation
		 Character:WaitForChild("Left Arm").Attachment3.Position = Vector3.new(-3, 0, 0) --rarm
		 Character:WaitForChild("Left Arm").Attachment3.Rotation = Vector3.new(90, 180, 90) --rarm rotation
		 Character:WaitForChild("Right Leg").Attachment4.Position = Vector3.new(1, -3, 0) --lleg
		 Character:WaitForChild("Right Leg").Attachment4.Rotation = Vector3.new(90, 180, 90) --lleg rotation
		 Character:WaitForChild("Left Leg").Attachment5.Position = Vector3.new(-1, -3, 0) --rleg
		 Character:WaitForChild("Left Leg").Attachment5.Rotation = Vector3.new(90, 180, 90) --rleg rotation
		 Character:WaitForChild("Head").Attachment6.Position = Vector3.new(0, 3, 0) -- head -- sword rotation
		-- Position or Rotation

game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(KeyPressed)
 if KeyPressed ==  "q" then -- key to play animation
     if toggle == false then
Character:WaitForChild("Right Arm").Attachment2.Rotation = Vector3.new(0, 0, 0) -- value for animation -- Position or Rotation
wait(.2)
Character:WaitForChild("Right Arm").Attachment2.Position = Vector3.new(3, 0, -4) -- value for animation -- Position or Rotation
wait(.1)
Character:WaitForChild("Right Arm").Attachment2.Position = Vector3.new(3, 0, 0)  -- normal value  -- Position or Rotation
wait(.3)
Character:WaitForChild("Right Arm").Attachment2.Rotation = Vector3.new(90, 180, 90)   -- normal value  -- Position or Rotation
           toggle = true
 else
     
	              toggle = false
     end
    
    end
end)

game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(KeyPressed)
 if KeyPressed ==  "e" then -- key to play animation
     if toggle == false then
Character:WaitForChild("Left Arm").Attachment3.Rotation = Vector3.new(0, 0, 0) -- value for animation -- Position or Rotation
wait(.2)
Character:WaitForChild("Left Arm").Attachment3.Position = Vector3.new(-3, 0, -4) -- value for animation -- Position or Rotation
wait(.1)
Character:WaitForChild("Left Arm").Attachment3.Position = Vector3.new(-3, 0, 0)  -- normal value  -- Position or Rotation
wait(.3)
Character:WaitForChild("Left Arm").Attachment3.Rotation = Vector3.new(90, 180, 90)   -- normal value  -- Position or Rotation
           toggle = true
 else
     
	              toggle = false
     end
    
    end
end)

game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(KeyPressed)
 if KeyPressed ==  "f" then -- key to play animation
     if toggle == false then
Character:WaitForChild("Left Leg").Attachment5.Rotation = Vector3.new(135, 180, 90) -- value for animation -- Position or Rotation
wait(.1)
Character:WaitForChild("Left Leg").Attachment5.Position = Vector3.new(-1, -3, -4) -- value for animation -- Position or Rotation
wait(.1)
Character:WaitForChild("Left Leg").Attachment5.Position = Vector3.new(-1, -3, 0)  -- normal value  -- Position or Rotation
wait(.2)
Character:WaitForChild("Left Leg").Attachment5.Rotation = Vector3.new(90, 180, 90)   -- normal value  -- Position or Rotation
           toggle = true
 else
     
	              toggle = false
     end
    
    end
end)

game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(KeyPressed)
 if KeyPressed ==  "r" then -- key to play animation
     if toggle == false then
Character:WaitForChild("Right Leg").Attachment4.Rotation = Vector3.new(135, 180, 90) -- value for animation -- Position or Rotation
wait(.1)
Character:WaitForChild("Right Leg").Attachment4.Position = Vector3.new(1, -3, -4) -- value for animation -- Position or Rotation
wait(.1)
Character:WaitForChild("Right Leg").Attachment4.Position = Vector3.new(1, -3, 0)  -- normal value  -- Position or Rotation
wait(.2)
Character:WaitForChild("Right Leg").Attachment4.Rotation = Vector3.new(90, 180, 90)   -- normal value  -- Position or Rotation
           toggle = true
 else
     
	              toggle = false
     end
    
    end
end)
